R --version
?<name of function or object>
> install.packages("tidyverse")
install.packages("tidyverse")
install.packages("jsonlite")
install.packages("Rtools")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
library (tidyverse)
?Mutate()
?mutate()
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
read.csv('demo2.csv')
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
count(diamonds, cut)
library(yaml)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
count(diamonds, cut)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
count(diamonds, cut)
library(tidyverse)
data(diamonds, package='ggplot2')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
count(diamonds, cut)
View(diamonds)
library(yaml)
View(total_volume)
View(total.volume2)
View(total_volume)
knitr::opts_chunk$set(echo = TRUE)
```{r}
```{r}
```{r setup, include=FALSE}
library(tidyverse)
?lm()
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
head(mtcars)
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/GitHub/MechaCar_Statistical_Analysis")
library.tidyverse
library(tidyverse)
library(tidyverse)
# Deliverable 1 Linear regression to predict MPG
## Predict the mpg of prototypes using several variables.
mechacar_data <- read.csv(file="MechaCar_mpg.csv")
View(mechacar_data)
# Deliverable 1 Linear regression to predict MPG
## Predict the mpg of prototypes using several variables.
mcdata <- read.csv(file="MechaCar_mpg.csv")
View(mcdata)
View(mcdata)
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + awd, data = mcdata)
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWDd, data = mcdata)
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mcdata)
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance, data = mcdata)
# Generate the summary statistics in code below.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance, data = mcdata ))
# Generate the multiple regression model in the code below.
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mcdata)
# Generate the summary statistics in code below.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mcdata ))
library(dplyr)
library(dplyr)
# Deliverable 1 Linear regression to predict MPG
## Predict the mpg of prototypes using several variables.
mcdata <- read.csv(file="MechaCar_mpg.csv")
# Generate the multiple regression model in the code below.
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mcdata)
# Generate the summary statistics in code below.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mcdata ))
scdata <- read.csv(file="Suspension_Coil.csv")
View(scdata)
total_summary <- summarize(scdata)
View(total_summary)
total_summary <- summarize(scdata(vehicleID, PSI))
head(mcdata)
head(scdata)
total_summary <- summarize("scdata"$"Manufacturing_Lot", "PSI")
total_summary <- summarize(scdata$Manufacturing_Lot, PSI)
total_summary <- summarize(scdata$PSI)
total_summary <- summarize(PSI)
total_summary <- scdata %>% summarize(Mean =mean(PSI), Median =median(PSI), Variance= var(PSI), SD = sd(PSI), .groups =' keep')
View(total_summary)
lot_summary <- scdata %>% group_by(Manufacturing_Lot) %>% summarize(Mean =mean(PSI), Median =median(PSI), Variance= var(PSI), SD = sd(PSI), .groups =' keep')
lot_summary <- scdata %>% group_by(Manufacturing_Lot) %>% summarize(Mean =mean(PSI), Median =median(PSI), Variance= var(PSI), SD = sd(PSI), .groups ='keep')
View(lot_summary)
